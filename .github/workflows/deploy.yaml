name: Deploy Terraform Infrastructure and Lambda

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ALLOWED_IPS: "82.43.64.101/32" 
  terraform_apply: false
  deployment_tag: devops-challenge

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get Runner IP Address
      id: get_ip
      run: |
        export RUNNER_IP="$(curl -s ifconfig.me)/32"
        echo "ALLOWED_IPS: $ALLOWED_IPS"
        echo "Runner IP: $RUNNER_IP"
        echo "RUNNER_IP=$RUNNER_IP" >> $GITHUB_ENV

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.12.2

    - name: Initialize Terraform
      run: terraform init 

    - name: Plan Terraform deployment
      run: |
        terraform plan \
          -var="allowed_ip_cidr=${{ env.ALLOWED_IPS }}" \
          -var="runner_ip_cidr=${{ env.RUNNER_IP }}"

    - name: Apply Terraform deployment
      if: env.terraform_apply == 'true'
      run: |
        terraform apply -auto-approve \
          -var="allowed_ip_cidr=${{ env.ALLOWED_IPS }}" \
          -var="runner_ip_cidr=${{ env.RUNNER_IP }}"
    
    # Create SSH config file
    - name: Run create-ssh-config.sh
      if: env.terraform_apply == 'true'
      run: |
        chmod +x ./scripts/create-ssh-config.sh
        ./scripts/create-ssh-config.sh

    # Create Artifacts directory if it doesn't exist
    - name: Create Artifacts directory
      run: mkdir -p ./Artifacts

    # Upload the entire Artifacts directory
    - name: Upload Artifacts directory as an artifact
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-${{ github.run_id }}
        path: ./Artifacts
